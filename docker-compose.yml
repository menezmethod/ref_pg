version: '3'

services:
  db:
    image: postgres:15
    container_name: url_shortener_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-migrations:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-url_shortener}
      # Force PostgreSQL to run initialization scripts even with existing data
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    # Add a custom command to create roles after PostgreSQL starts
    command: >
      bash -c "
        # Start PostgreSQL in background
        docker-entrypoint.sh postgres &
        
        # Wait for PostgreSQL to start
        until pg_isready -U postgres; do
          echo 'Waiting for PostgreSQL to start...'
          sleep 2
        done
        
        # Create the required roles
        echo 'Creating roles and permissions...'
        psql -U postgres -d url_shortener -c \"
          DO \\\$\\\$
          BEGIN
              -- Create anonymous role if it doesn't exist
              IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'anon') THEN
                  CREATE ROLE anon NOLOGIN;
              END IF;
              
              -- Create authenticator role (or update password if it exists)
              IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'authenticator') THEN
                  CREATE ROLE authenticator WITH LOGIN PASSWORD '$${POSTGRES_PASSWORD:-postgres}' NOINHERIT;
              ELSE
                  ALTER ROLE authenticator WITH PASSWORD '$${POSTGRES_PASSWORD:-postgres}';
              END IF;
              
              -- Ensure anon role is granted to authenticator
              GRANT anon TO authenticator;
              
              -- Create API schema if it doesn't exist
              CREATE SCHEMA IF NOT EXISTS api;
              
              -- Grant permissions
              GRANT USAGE ON SCHEMA api TO anon;
              GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA api TO anon;
              GRANT USAGE ON ALL SEQUENCES IN SCHEMA api TO anon;
              GRANT SELECT ON ALL TABLES IN SCHEMA api TO anon;
          END
          \\\$\\\$;
        \"
        
        # Keep container running
        wait
      "
    networks:
      - shortener-net

  postgrest:
    image: postgrest/postgrest:latest
    container_name: url_shortener_api
    restart: always
    depends_on:
      - db
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-url_shortener}
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_me}
      PGRST_SERVER_PORT: 3000
    ports:
      - "3333:3000"
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 20 &&
        postgrest
      "
    networks:
      - shortener-net

  openresty:
    build:
      context: ./docker/openresty
      dockerfile: Dockerfile
    container_name: url_shortener_redirect
    restart: always
    depends_on:
      - postgrest
    environment:
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-60}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN:-*}
    ports:
      - "8001:80"
    networks:
      - shortener-net

networks:
  shortener-net:
    driver: bridge

volumes:
  postgres_data: 