services:
  db:
    image: postgres:15
    container_name: url_shortener_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/000_main_migration.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./sql/init/init-db.sh:/docker-entrypoint-initdb.d/2-init-db.sh
      - ./sql/init/update-pg-hba.sh:/docker-entrypoint-initdb.d/3-update-pg-hba.sh
      - ./sql:/docker-entrypoint-initdb.d/sql
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-url_shortener}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_me}
      MASTER_PASSWORD: ${MASTER_PASSWORD:-master123}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:alpine
    container_name: url_shortener_redis
    restart: always
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgrest:
    build:
      context: ./docker/postgrest
      dockerfile: Dockerfile
    container_name: url_shortener_api
    restart: always
    depends_on:
      - db
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD:-postgres}@db-gwg0scggsk0o8swcgogg04wc:5432/${POSTGRES_DB:-url_shortener}
      # Fallback to regular name if Coolify name doesn't work
      COOLIFY_DB_FALLBACK: postgres://authenticator:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-url_shortener}
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_me}
      PGRST_SERVER_PORT: 3000
      PGRST_DB_POOL: 10
      PGRST_DB_POOL_TIMEOUT: 10
      PGRST_MAX_ROWS: 1000
      PGRST_CORS_PREFLIGHT_CACHE_SECONDS: 3600
      PGRST_RAW_MEDIA_TYPES: application/vnd.pgrst.object+json,application/vnd.pgrst.object+octet-stream
      # Pass these through to the entrypoint script
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-url_shortener}
    entrypoint: ["/bin/sh", "/entrypoint.sh"]
    ports:
      - "3333:3000"
      - "8888:8888"
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/ -m 5 || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  openresty:
    build:
      context: ./docker/openresty
      dockerfile: Dockerfile
    container_name: url_shortener_redirect
    restart: always
    depends_on:
      - postgrest
    environment:
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-60}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      LOG_LEVEL: debug
    ports:
      - "8001:80"
    volumes:
      - ./logs/openresty:/var/log/nginx
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: url_shortener_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5051:80"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  shortener-net:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  redis_data: 