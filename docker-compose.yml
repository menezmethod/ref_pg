services:
  db:
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
    container_name: url_shortener_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-url_shortener}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_me}
      MASTER_PASSWORD: ${MASTER_PASSWORD:-master123}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Fallback DB initializer to ensure migrations are applied when reusing volumes
  db-init:
    image: postgres:15
    container_name: url_shortener_db_init
    restart: "no"
    depends_on:
      - db
    volumes:
      - ./migrations:/migrations
      - ./init-production-db.sh:/init-db.sh
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-url_shortener}
      MASTER_PASSWORD: ${MASTER_PASSWORD:-master123}
    # Modified command with debugging and simplified approach
    command: ["sh", "-c", "ls -la /migrations && if [ -f /migrations/000_main_migration.sql ]; then echo 'File exists, running SQL script...' && sleep 5 && PGPASSWORD=${POSTGRES_PASSWORD} psql -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /migrations/000_main_migration.sql; else echo 'ERROR: Migration file is not a regular file or does not exist' && ls -la /migrations; fi"]
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:alpine
    container_name: url_shortener_redis
    restart: always
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgrest:
    build:
      context: ./docker/postgrest
      dockerfile: Dockerfile
    container_name: url_shortener_api
    restart: always
    depends_on:
      - db
      - db-init
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-url_shortener}
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_me}
      PGRST_SERVER_PORT: 3000
    ports:
      - "3333:3000"
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/ -m 5 || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  openresty:
    build:
      context: ./docker/openresty
      dockerfile: Dockerfile
    container_name: url_shortener_redirect
    restart: always
    depends_on:
      - postgrest
    environment:
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-60}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      LOG_LEVEL: debug
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN:-*}
    ports:
      - "8001:80"
    volumes:
      - ./logs/openresty:/var/log/nginx
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: url_shortener_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5051:80"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - shortener-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  shortener-net:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  redis_data: 