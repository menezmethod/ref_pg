services:
  db:
    image: postgres:15
    container_name: url_shortener_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-url_shortener}
    networks:
      - shortener-net

  init-db:
    image: postgres:15
    restart: "no"
    depends_on:
      - db
    volumes:
      - ./migrations:/migrations
    command: >
      bash -c "
        echo 'Waiting for PostgreSQL...' &&
        sleep 10 &&
        echo 'Checking migration file...' &&
        if [ -f /migrations/000_main_migration.sql ]; then
          echo 'Migration file found, running script...' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h db -U $$POSTGRES_USER -d $$POSTGRES_DB -f /migrations/000_main_migration.sql
        else
          echo 'Migration file not found or not accessible, creating basic schema...' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h db -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE SCHEMA IF NOT EXISTS api;' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h db -U $$POSTGRES_USER -d $$POSTGRES_DB -c '
            CREATE TABLE IF NOT EXISTS api.urls (
              id SERIAL PRIMARY KEY,
              original_url TEXT NOT NULL,
              created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
            );
          ' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h db -U $$POSTGRES_USER -d $$POSTGRES_DB -c '
            CREATE TABLE IF NOT EXISTS api.short_links (
              id SERIAL PRIMARY KEY,
              url_id INTEGER REFERENCES api.urls(id),
              code TEXT NOT NULL UNIQUE,
              created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
            );
          ' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h db -U $$POSTGRES_USER -d $$POSTGRES_DB -c \"
            CREATE OR REPLACE FUNCTION api.create_short_link(p_original_url TEXT, p_custom_alias TEXT DEFAULT NULL)
            RETURNS JSON AS \\$function\\$
            DECLARE
              v_url_id INTEGER;
              v_code TEXT;
            BEGIN
              INSERT INTO api.urls (original_url) VALUES (p_original_url) RETURNING id INTO v_url_id;
              v_code := COALESCE(p_custom_alias, 'url' || v_url_id::TEXT);
              INSERT INTO api.short_links (url_id, code) VALUES (v_url_id, v_code);
              RETURN json_build_object(
                'success', TRUE,
                'code', v_code,
                'short_url', 'https://ref.menezmethod.com/r/' || v_code,
                'original_url', p_original_url
              );
            END;
            \\$function\\$ LANGUAGE plpgsql SECURITY DEFINER;
          \" &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h db -U $$POSTGRES_USER -d $$POSTGRES_DB -c \"
            CREATE OR REPLACE FUNCTION api.get_original_url(p_code TEXT)
            RETURNS JSON AS \\$function\\$
            DECLARE
              v_original_url TEXT;
            BEGIN
              SELECT u.original_url INTO v_original_url
              FROM api.short_links s
              JOIN api.urls u ON s.url_id = u.id
              WHERE s.code = p_code;
              
              IF v_original_url IS NULL THEN
                RETURN json_build_object(
                  'success', FALSE,
                  'error', 'Short URL not found'
                );
              END IF;
              
              RETURN json_build_object(
                'success', TRUE,
                'original_url', v_original_url
              );
            END;
            \\$function\\$ LANGUAGE plpgsql SECURITY DEFINER;
          \" &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h db -U $$POSTGRES_USER -d $$POSTGRES_DB -c \"
            CREATE OR REPLACE FUNCTION api.quick_link(url TEXT, alias TEXT, api_key TEXT DEFAULT NULL)
            RETURNS JSON AS \\$function\\$
            BEGIN
              RETURN api.create_short_link(url, alias);
            END;
            \\$function\\$ LANGUAGE plpgsql SECURITY DEFINER;
          \"
        fi &&
        echo 'Ensuring roles are set correctly...' &&
        PGPASSWORD=$$POSTGRES_PASSWORD psql -h db -U $$POSTGRES_USER -d $$POSTGRES_DB -c \"
          DO \\$\\$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'anon') THEN
              CREATE ROLE anon NOLOGIN;
            END IF;
            IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'authenticator') THEN
              DROP ROLE IF EXISTS authenticator;
              CREATE ROLE authenticator WITH LOGIN PASSWORD '$POSTGRES_PASSWORD' NOINHERIT;
              GRANT anon TO authenticator;
            END IF;
            GRANT USAGE ON SCHEMA api TO anon;
            GRANT USAGE ON SCHEMA api TO authenticator;
            GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA api TO anon;
          END;
          \\$\\$;
        \" &&
        echo 'Database initialization completed.'
      "
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-url_shortener}
    networks:
      - shortener-net

  postgrest:
    image: postgrest/postgrest:latest
    container_name: url_shortener_api
    restart: always
    depends_on:
      - db
      - init-db
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-url_shortener}
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_me}
      PGRST_SERVER_PORT: 3000
    ports:
      - "3333:3000"
    networks:
      - shortener-net
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 15 &&
        postgrest
      "

  openresty:
    image: openresty/openresty:alpine
    container_name: url_shortener_redirect
    restart: always
    depends_on:
      - postgrest
    environment:
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-60}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      LOG_LEVEL: debug
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN:-*}
    ports:
      - "8001:80"
    command: >
      sh -c '
        echo "Creating simplified nginx configuration..." &&
        mkdir -p /usr/local/openresty/lua &&
        cat > /etc/nginx/conf.d/default.conf << EOF
        server {
            listen 80;
            server_name localhost;

            # Health check endpoint
            location /health {
                access_log off;
                add_header Content-Type text/plain;
                return 200 "OK";
            }

            # Home page
            location = / {
                default_type text/html;
                return 200 "<!DOCTYPE html><html><head><title>URL Shortener</title></head><body><h1>URL Shortener Service</h1><p>Use the API to create and manage short links.</p></body></html>";
            }

            # API passthrough to PostgREST
            location /api/ {
                rewrite ^/api/(.*) /\$1 break;
                proxy_pass http://postgrest:3000/;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            }

            # Direct access to RPC functions
            location ~ ^/api/rpc/([a-zA-Z_]+)$ {
                set \$func_name \$1;
                proxy_pass http://postgrest:3000/rpc/\$func_name;
                proxy_set_header Content-Type application/json;
            }

            # URL shortener redirect
            location ~ ^/r/([a-zA-Z0-9]+)$ {
                set \$code \$1;
                proxy_pass http://postgrest:3000/rpc/get_original_url?p_code=\$code;
                proxy_set_header Content-Type application/json;
                
                # Handle the response with a simple header filter
                add_header Content-Type application/json;
            }

            # Error page
            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                root /usr/local/openresty/nginx/html;
            }
        }
        EOF
        echo "Starting OpenResty with simplified configuration..."
        exec /usr/local/openresty/bin/openresty -g "daemon off;"
      '
    networks:
      - shortener-net

networks:
  shortener-net:
    driver: bridge

volumes:
  postgres_data: 